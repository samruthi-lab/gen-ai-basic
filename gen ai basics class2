{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPnF1lZBjoZnilWJdYj1baF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/samruthi-lab/gen-ai-basic/blob/main/gen%20ai%20basics%20class2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "4PE1bPrslkcz",
        "outputId": "8dcb191d-1c77-4705-b966-7c1edbd3c985"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   CustomerID   Genre  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male   19                  15                      39\n",
              "1           2    Male   21                  15                      81\n",
              "2           3  Female   20                  16                       6\n",
              "3           4  Female   23                  16                      77\n",
              "4           5  Female   31                  17                      40"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-92934d25-cf09-4b21-9571-10325b941f9f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92934d25-cf09-4b21-9571-10325b941f9f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-92934d25-cf09-4b21-9571-10325b941f9f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-92934d25-cf09-4b21-9571-10325b941f9f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7a831ca6-1cce-42cf-b558-4e264df3c1b1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7a831ca6-1cce-42cf-b558-4e264df3c1b1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7a831ca6-1cce-42cf-b558-4e264df3c1b1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(dt\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Genre\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 19,\n        \"max\": 31,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          21,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Annual Income (k$)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 15,\n        \"max\": 17,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          15,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending Score (1-100)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30,\n        \"min\": 6,\n        \"max\": 81,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          81,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "import kagglehub\n",
        "path = kagglehub.dataset_download(\"kandij/mall-customers\")\n",
        "\n",
        "import pandas as pd\n",
        "import os\n",
        "csv_file_path = os.path.join(path, \"Mall_Customers.csv\")\n",
        "dt = pd.read_csv(csv_file_path)\n",
        "display(dt.head())"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mU8YDsMBmlc4",
        "outputId": "4820c1f3-549e-45d6-ba21-9d07cf4acd4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 200 entries, 0 to 199\n",
            "Data columns (total 5 columns):\n",
            " #   Column                  Non-Null Count  Dtype \n",
            "---  ------                  --------------  ----- \n",
            " 0   CustomerID              200 non-null    int64 \n",
            " 1   Genre                   200 non-null    object\n",
            " 2   Age                     200 non-null    int64 \n",
            " 3   Annual Income (k$)      200 non-null    int64 \n",
            " 4   Spending Score (1-100)  200 non-null    int64 \n",
            "dtypes: int64(4), object(1)\n",
            "memory usage: 7.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = dt.iloc[:,[3,4]].values\n",
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yUgy84sWmqyu",
        "outputId": "56e753d8-e469-4f39-bd0c-2dc244c49b52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 15,  39],\n",
              "       [ 15,  81],\n",
              "       [ 16,   6],\n",
              "       [ 16,  77],\n",
              "       [ 17,  40],\n",
              "       [ 17,  76],\n",
              "       [ 18,   6],\n",
              "       [ 18,  94],\n",
              "       [ 19,   3],\n",
              "       [ 19,  72],\n",
              "       [ 19,  14],\n",
              "       [ 19,  99],\n",
              "       [ 20,  15],\n",
              "       [ 20,  77],\n",
              "       [ 20,  13],\n",
              "       [ 20,  79],\n",
              "       [ 21,  35],\n",
              "       [ 21,  66],\n",
              "       [ 23,  29],\n",
              "       [ 23,  98],\n",
              "       [ 24,  35],\n",
              "       [ 24,  73],\n",
              "       [ 25,   5],\n",
              "       [ 25,  73],\n",
              "       [ 28,  14],\n",
              "       [ 28,  82],\n",
              "       [ 28,  32],\n",
              "       [ 28,  61],\n",
              "       [ 29,  31],\n",
              "       [ 29,  87],\n",
              "       [ 30,   4],\n",
              "       [ 30,  73],\n",
              "       [ 33,   4],\n",
              "       [ 33,  92],\n",
              "       [ 33,  14],\n",
              "       [ 33,  81],\n",
              "       [ 34,  17],\n",
              "       [ 34,  73],\n",
              "       [ 37,  26],\n",
              "       [ 37,  75],\n",
              "       [ 38,  35],\n",
              "       [ 38,  92],\n",
              "       [ 39,  36],\n",
              "       [ 39,  61],\n",
              "       [ 39,  28],\n",
              "       [ 39,  65],\n",
              "       [ 40,  55],\n",
              "       [ 40,  47],\n",
              "       [ 40,  42],\n",
              "       [ 40,  42],\n",
              "       [ 42,  52],\n",
              "       [ 42,  60],\n",
              "       [ 43,  54],\n",
              "       [ 43,  60],\n",
              "       [ 43,  45],\n",
              "       [ 43,  41],\n",
              "       [ 44,  50],\n",
              "       [ 44,  46],\n",
              "       [ 46,  51],\n",
              "       [ 46,  46],\n",
              "       [ 46,  56],\n",
              "       [ 46,  55],\n",
              "       [ 47,  52],\n",
              "       [ 47,  59],\n",
              "       [ 48,  51],\n",
              "       [ 48,  59],\n",
              "       [ 48,  50],\n",
              "       [ 48,  48],\n",
              "       [ 48,  59],\n",
              "       [ 48,  47],\n",
              "       [ 49,  55],\n",
              "       [ 49,  42],\n",
              "       [ 50,  49],\n",
              "       [ 50,  56],\n",
              "       [ 54,  47],\n",
              "       [ 54,  54],\n",
              "       [ 54,  53],\n",
              "       [ 54,  48],\n",
              "       [ 54,  52],\n",
              "       [ 54,  42],\n",
              "       [ 54,  51],\n",
              "       [ 54,  55],\n",
              "       [ 54,  41],\n",
              "       [ 54,  44],\n",
              "       [ 54,  57],\n",
              "       [ 54,  46],\n",
              "       [ 57,  58],\n",
              "       [ 57,  55],\n",
              "       [ 58,  60],\n",
              "       [ 58,  46],\n",
              "       [ 59,  55],\n",
              "       [ 59,  41],\n",
              "       [ 60,  49],\n",
              "       [ 60,  40],\n",
              "       [ 60,  42],\n",
              "       [ 60,  52],\n",
              "       [ 60,  47],\n",
              "       [ 60,  50],\n",
              "       [ 61,  42],\n",
              "       [ 61,  49],\n",
              "       [ 62,  41],\n",
              "       [ 62,  48],\n",
              "       [ 62,  59],\n",
              "       [ 62,  55],\n",
              "       [ 62,  56],\n",
              "       [ 62,  42],\n",
              "       [ 63,  50],\n",
              "       [ 63,  46],\n",
              "       [ 63,  43],\n",
              "       [ 63,  48],\n",
              "       [ 63,  52],\n",
              "       [ 63,  54],\n",
              "       [ 64,  42],\n",
              "       [ 64,  46],\n",
              "       [ 65,  48],\n",
              "       [ 65,  50],\n",
              "       [ 65,  43],\n",
              "       [ 65,  59],\n",
              "       [ 67,  43],\n",
              "       [ 67,  57],\n",
              "       [ 67,  56],\n",
              "       [ 67,  40],\n",
              "       [ 69,  58],\n",
              "       [ 69,  91],\n",
              "       [ 70,  29],\n",
              "       [ 70,  77],\n",
              "       [ 71,  35],\n",
              "       [ 71,  95],\n",
              "       [ 71,  11],\n",
              "       [ 71,  75],\n",
              "       [ 71,   9],\n",
              "       [ 71,  75],\n",
              "       [ 72,  34],\n",
              "       [ 72,  71],\n",
              "       [ 73,   5],\n",
              "       [ 73,  88],\n",
              "       [ 73,   7],\n",
              "       [ 73,  73],\n",
              "       [ 74,  10],\n",
              "       [ 74,  72],\n",
              "       [ 75,   5],\n",
              "       [ 75,  93],\n",
              "       [ 76,  40],\n",
              "       [ 76,  87],\n",
              "       [ 77,  12],\n",
              "       [ 77,  97],\n",
              "       [ 77,  36],\n",
              "       [ 77,  74],\n",
              "       [ 78,  22],\n",
              "       [ 78,  90],\n",
              "       [ 78,  17],\n",
              "       [ 78,  88],\n",
              "       [ 78,  20],\n",
              "       [ 78,  76],\n",
              "       [ 78,  16],\n",
              "       [ 78,  89],\n",
              "       [ 78,   1],\n",
              "       [ 78,  78],\n",
              "       [ 78,   1],\n",
              "       [ 78,  73],\n",
              "       [ 79,  35],\n",
              "       [ 79,  83],\n",
              "       [ 81,   5],\n",
              "       [ 81,  93],\n",
              "       [ 85,  26],\n",
              "       [ 85,  75],\n",
              "       [ 86,  20],\n",
              "       [ 86,  95],\n",
              "       [ 87,  27],\n",
              "       [ 87,  63],\n",
              "       [ 87,  13],\n",
              "       [ 87,  75],\n",
              "       [ 87,  10],\n",
              "       [ 87,  92],\n",
              "       [ 88,  13],\n",
              "       [ 88,  86],\n",
              "       [ 88,  15],\n",
              "       [ 88,  69],\n",
              "       [ 93,  14],\n",
              "       [ 93,  90],\n",
              "       [ 97,  32],\n",
              "       [ 97,  86],\n",
              "       [ 98,  15],\n",
              "       [ 98,  88],\n",
              "       [ 99,  39],\n",
              "       [ 99,  97],\n",
              "       [101,  24],\n",
              "       [101,  68],\n",
              "       [103,  17],\n",
              "       [103,  85],\n",
              "       [103,  23],\n",
              "       [103,  69],\n",
              "       [113,   8],\n",
              "       [113,  91],\n",
              "       [120,  16],\n",
              "       [120,  79],\n",
              "       [126,  28],\n",
              "       [126,  74],\n",
              "       [137,  18],\n",
              "       [137,  83]])"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "from sklearn.cluster import KMeans\n",
        "error = []\n",
        "for i in range(1,11):\n",
        "    k = KMeans(n_clusters=i, init='k-means++')\n",
        "    k.fit(x)\n",
        "    error.append(k.inertia_)"
      ],
      "metadata": {
        "id": "exrbFYBXnuAw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(range(1,11), error)\n",
        "plt.title('Elbow Method')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('Error')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ZU9oxboooQcC",
        "outputId": "1a5ac7c3-860b-49b2-8c38-3f8e3aa213e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " K= KMeans(n_clusters=5, init='k-means++')\n"
      ],
      "metadata": {
        "id": "5Sk4d8jkpkgt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "k.fit(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "Qen5coY0qnSK",
        "outputId": "84baba43-186d-4619-f716-be57c0c9a9a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(n_clusters=10)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KMeans</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.cluster.KMeans.html\">?<span>Documentation for KMeans</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>KMeans(n_clusters=10)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y=k.predict (x)"
      ],
      "metadata": {
        "id": "xjAr6S_RrEdM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZjFCCHb-rTfP",
        "outputId": "4f1eed80-7b83-4fc8-b531-d3bfe8e41e97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([8, 6, 4, 6, 8, 6, 4, 6, 4, 6, 4, 6, 4, 6, 4, 6, 8, 6, 8, 6, 8, 6,\n",
              "       4, 6, 4, 6, 8, 1, 8, 6, 4, 6, 4, 6, 4, 6, 4, 6, 8, 6, 8, 6, 8, 1,\n",
              "       8, 1, 1, 1, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 3, 1, 3, 1, 3,\n",
              "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
              "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 9, 0, 3, 0, 9, 0, 9, 0,\n",
              "       3, 0, 9, 0, 9, 0, 9, 0, 9, 0, 3, 0, 9, 0, 2, 0, 9, 0, 9, 0, 9, 0,\n",
              "       9, 0, 9, 0, 9, 0, 2, 0, 9, 0, 2, 0, 2, 0, 2, 0, 9, 0, 9, 0, 9, 0,\n",
              "       9, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 7, 2, 7, 2, 7, 5, 7, 5, 7, 5, 7,\n",
              "       5, 7], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x[y==0, 0], x[y==0,1], c= 'red')\n",
        "plt.scatter(x[y==1, 0], x[y==1,1], c= 'blue')\n",
        "plt.scatter(x[y==2, 0], x[y==2,1], c= 'violet')\n",
        "plt.scatter(x[y==3, 0], x[y==3,1], c= 'grey')\n",
        "plt.scatter(x[y==4, 0], x[y==4,1], c= 'yellow')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "X5nPznYordex",
        "outputId": "4a3db618-0a5a-4e7a-8db9-c741df0fdf5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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uUdXXXWVrrzySp111llav369xo0bp3//93/3akkAAMAnPAlQBgcHtXv3brW0tLy3kJIStbS0qKOjY9T5J06cUDgcTvgCAACFy5MA5U9/+pOGhoZUXV2dcLy6ulo9PT2jzl+9erWqqqriX3V1dW4tFQAAeCAv5qCsXLlSoVAo/tXd3e31kgAAgIM8aTN+//vfr9LSUvX29iYc7+3tVU1NzajzKyoqVFFR4dbyAACAxzy5g1JeXq7zzjtPW7dujR+LRCLaunWrmpubvVgSAADwEc8Gta1YsUJLlizRrFmz9IlPfEL33nuv+vv7deWVV3q1JAAA4BOeBSj/8A//oLffflu33nqrenp69LGPfUybN28eVTibTGwDZrp5AADIH7HP7djneDoBw8xZPrN//346eQAAyFPd3d2qra1Ne05eBiiRSEQHDx5UZWWlAoGA18tJKxwOq66uTt3d3QoGg14vByNwffyN6+NfXBt/8+v1MQxDfX19mjp1qkpK0pfB5uVmgSUlJRkjL78JBoO++j8JEnF9/I3r419cG3/z4/WpqqoydV5ezEEBAADFhQAFAAD4DgGKwyoqKnTbbbcxaM6nuD7+xvXxL66NvxXC9cnLIlkAAFDYuIMCAAB8hwAFAAD4DgEKAADwHQIUAADgOwQoNlm9erU+/vGPq7KyUpMnT9all16qPXv2JJxz/PhxLV26VKeffromTJigyy67TL29vR6tuHh95zvfUSAQUFtbW/wY18ZbBw4c0Be/+EWdfvrpGjt2rGbOnKmXX345/rhhGLr11ls1ZcoUjR07Vi0tLfr973/v4YqLx9DQkG655RY1NjZq7NixOvPMM/Xtb387YS8Vro87duzYoc9//vOaOnWqAoGAfvaznyU8buY6HDlyRIsXL1YwGNTEiRP11a9+VceOHXPxpzCPAMUm27dv19KlS/Xiiy/qmWee0cmTJ3XJJZeov78/fs7y5cv15JNP6vHHH9f27dt18OBBtba2erjq4vPSSy/pRz/6kT7ykY8kHOfaeOcvf/mL5syZo7KyMj399NP63e9+p+9+97t63/veFz9nzZo1WrdundavX69du3Zp/Pjxmjt3ro4fP+7hyovDnXfeqfvvv18/+MEP1NnZqTvvvFNr1qzR97///fg5XB939Pf366Mf/ah++MMfJn3czHVYvHixfvvb3+qZZ57RU089pR07dujqq69260ewxoAjDh8+bEgytm/fbhiGYRw9etQoKyszHn/88fg5nZ2dhiSjo6PDq2UWlb6+PmPatGnGM888Y/zt3/6tsWzZMsMwuDZe+8Y3vmFccMEFKR+PRCJGTU2Ncdddd8WPHT161KioqDAeffRRN5ZY1D772c8aX/nKVxKOtba2GosXLzYMg+vjFUnGpk2b4n82cx1+97vfGZKMl156KX7O008/bQQCAePAgQOurd0s7qA4JBQKSZImTZokSdq9e7dOnjyplpaW+DkzZsxQfX29Ojo6PFljsVm6dKk++9nPJlwDiWvjtV/84heaNWuWvvCFL2jy5Mk655xz9MADD8Qf37t3r3p6ehKuT1VVlWbPns31ccH555+vrVu36o033pAk/frXv9bzzz+vz3zmM5K4Pn5h5jp0dHRo4sSJmjVrVvyclpYWlZSUaNeuXa6vOZO83CzQ7yKRiNra2jRnzhydffbZkqSenh6Vl5dr4sSJCedWV1erp6fHg1UWl8cee0yvvPKKXnrppVGPcW289dZbb+n+++/XihUr9M1vflMvvfSSvv71r6u8vFxLliyJX4Pq6uqE53F93HHzzTcrHA5rxowZKi0t1dDQkG6//XYtXrxYkrg+PmHmOvT09Gjy5MkJj48ZM0aTJk3y5bUiQHHA0qVL9frrr+v555/3eimQ1N3drWXLlumZZ57Raaed5vVyMEIkEtGsWbN0xx13SJLOOeccvf7661q/fr2WLFni8eqwceNGPfLII9qwYYM+/OEP61e/+pXa2to0depUrg8cRYrHZtdee62eeuopPffcc6qtrY0fr6mp0eDgoI4ePZpwfm9vr2pqalxeZXHZvXu3Dh8+rHPPPVdjxozRmDFjtH37dq1bt05jxoxRdXU118ZDU6ZM0VlnnZVwrKmpSV1dXZIUvwYju6q4Pu648cYbdfPNN+vyyy/XzJkz9aUvfUnLly/X6tWrJXF9/MLMdaipqdHhw4cTHj916pSOHDniy2tFgGITwzB07bXXatOmTXr22WfV2NiY8Ph5552nsrIybd26NX5sz5496urqUnNzs9vLLSoXX3yxXnvtNf3qV7+Kf82aNUuLFy+O/2+ujXfmzJkzqiX/jTfe0Ac/+EFJUmNjo2pqahKuTzgc1q5du7g+LhgYGFBJSeJHRWlpqSKRiCSuj1+YuQ7Nzc06evSodu/eHT/n2WefVSQS0ezZs11fc0ZeV+kWiq997WtGVVWVsW3bNuPQoUPxr4GBgfg5//RP/2TU19cbzz77rPHyyy8bzc3NRnNzs4erLl7Du3gMg2vjpV/+8pfGmDFjjNtvv934/e9/bzzyyCPGuHHjjJ/+9Kfxc77zne8YEydONH7+858bv/nNb4z58+cbjY2NxjvvvOPhyovDkiVLjDPOOMN46qmnjL179xrt7e3G+9//fuOmm26Kn8P1cUdfX5/x6quvGq+++qohybjnnnuMV1991fjjH/9oGIa56zBv3jzjnHPOMXbt2mU8//zzxrRp04xFixZ59SOlRYBiE0lJvx588MH4Oe+8845xzTXXGO973/uMcePGGX//939vHDp0yLtFF7GRAQrXxltPPvmkcfbZZxsVFRXGjBkzjB//+McJj0ciEeOWW24xqqurjYqKCuPiiy829uzZ49Fqi0s4HDaWLVtm1NfXG6eddprxoQ99yPjnf/5n48SJE/FzuD7ueO6555J+zixZssQwDHPX4c9//rOxaNEiY8KECUYwGDSuvPJKo6+vz4OfJrOAYQwbBwgAAOAD1KAAAADfIUABAAC+Q4ACAAB8hwAFAAD4DgEKAADwHQIUAADgOwQoAADAdwhQAACA7xCgAAAA3yFAAQAAvkOAAgAAfIcABQAA+M7/B64uaegV1kY5AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt[y==1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1178
        },
        "id": "S7j-0DRFtI0G",
        "outputId": "27de2dcb-0b1d-4334-f243-01ee5240ce62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    CustomerID   Genre  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "27          28    Male   35                  28                      61\n",
              "43          44  Female   31                  39                      61\n",
              "45          46  Female   24                  39                      65\n",
              "46          47  Female   50                  40                      55\n",
              "47          48  Female   27                  40                      47\n",
              "50          51  Female   49                  42                      52\n",
              "51          52    Male   33                  42                      60\n",
              "52          53  Female   31                  43                      54\n",
              "53          54    Male   59                  43                      60\n",
              "54          55  Female   50                  43                      45\n",
              "55          56    Male   47                  43                      41\n",
              "56          57  Female   51                  44                      50\n",
              "57          58    Male   69                  44                      46\n",
              "58          59  Female   27                  46                      51\n",
              "59          60    Male   53                  46                      46\n",
              "60          61    Male   70                  46                      56\n",
              "61          62    Male   19                  46                      55\n",
              "62          63  Female   67                  47                      52\n",
              "63          64  Female   54                  47                      59\n",
              "64          65    Male   63                  48                      51\n",
              "65          66    Male   18                  48                      59\n",
              "66          67  Female   43                  48                      50\n",
              "67          68  Female   68                  48                      48\n",
              "68          69    Male   19                  48                      59\n",
              "69          70  Female   32                  48                      47\n",
              "70          71    Male   70                  49                      55\n",
              "71          72  Female   47                  49                      42\n",
              "72          73  Female   60                  50                      49\n",
              "73          74  Female   60                  50                      56\n",
              "75          76    Male   26                  54                      54\n",
              "76          77  Female   45                  54                      53\n",
              "78          79  Female   23                  54                      52\n",
              "80          81    Male   57                  54                      51\n",
              "81          82    Male   38                  54                      55\n",
              "84          85  Female   21                  54                      57\n",
              "86          87  Female   55                  57                      58"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aa62f7de-2c54-46de-8852-43a0adcd0bb8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>28</td>\n",
              "      <td>Male</td>\n",
              "      <td>35</td>\n",
              "      <td>28</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>44</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>39</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>46</td>\n",
              "      <td>Female</td>\n",
              "      <td>24</td>\n",
              "      <td>39</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>47</td>\n",
              "      <td>Female</td>\n",
              "      <td>50</td>\n",
              "      <td>40</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>48</td>\n",
              "      <td>Female</td>\n",
              "      <td>27</td>\n",
              "      <td>40</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>51</td>\n",
              "      <td>Female</td>\n",
              "      <td>49</td>\n",
              "      <td>42</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>52</td>\n",
              "      <td>Male</td>\n",
              "      <td>33</td>\n",
              "      <td>42</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>53</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>43</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>54</td>\n",
              "      <td>Male</td>\n",
              "      <td>59</td>\n",
              "      <td>43</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>55</td>\n",
              "      <td>Female</td>\n",
              "      <td>50</td>\n",
              "      <td>43</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>56</td>\n",
              "      <td>Male</td>\n",
              "      <td>47</td>\n",
              "      <td>43</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>57</td>\n",
              "      <td>Female</td>\n",
              "      <td>51</td>\n",
              "      <td>44</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>58</td>\n",
              "      <td>Male</td>\n",
              "      <td>69</td>\n",
              "      <td>44</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>59</td>\n",
              "      <td>Female</td>\n",
              "      <td>27</td>\n",
              "      <td>46</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>60</td>\n",
              "      <td>Male</td>\n",
              "      <td>53</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>61</td>\n",
              "      <td>Male</td>\n",
              "      <td>70</td>\n",
              "      <td>46</td>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>62</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>46</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>63</td>\n",
              "      <td>Female</td>\n",
              "      <td>67</td>\n",
              "      <td>47</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>64</td>\n",
              "      <td>Female</td>\n",
              "      <td>54</td>\n",
              "      <td>47</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>65</td>\n",
              "      <td>Male</td>\n",
              "      <td>63</td>\n",
              "      <td>48</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>66</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>48</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>67</td>\n",
              "      <td>Female</td>\n",
              "      <td>43</td>\n",
              "      <td>48</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>68</td>\n",
              "      <td>Female</td>\n",
              "      <td>68</td>\n",
              "      <td>48</td>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>69</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>48</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>70</td>\n",
              "      <td>Female</td>\n",
              "      <td>32</td>\n",
              "      <td>48</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>71</td>\n",
              "      <td>Male</td>\n",
              "      <td>70</td>\n",
              "      <td>49</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>72</td>\n",
              "      <td>Female</td>\n",
              "      <td>47</td>\n",
              "      <td>49</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>73</td>\n",
              "      <td>Female</td>\n",
              "      <td>60</td>\n",
              "      <td>50</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>74</td>\n",
              "      <td>Female</td>\n",
              "      <td>60</td>\n",
              "      <td>50</td>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>76</td>\n",
              "      <td>Male</td>\n",
              "      <td>26</td>\n",
              "      <td>54</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>77</td>\n",
              "      <td>Female</td>\n",
              "      <td>45</td>\n",
              "      <td>54</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>79</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>54</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>81</td>\n",
              "      <td>Male</td>\n",
              "      <td>57</td>\n",
              "      <td>54</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>81</th>\n",
              "      <td>82</td>\n",
              "      <td>Male</td>\n",
              "      <td>38</td>\n",
              "      <td>54</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>85</td>\n",
              "      <td>Female</td>\n",
              "      <td>21</td>\n",
              "      <td>54</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>87</td>\n",
              "      <td>Female</td>\n",
              "      <td>55</td>\n",
              "      <td>57</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa62f7de-2c54-46de-8852-43a0adcd0bb8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aa62f7de-2c54-46de-8852-43a0adcd0bb8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aa62f7de-2c54-46de-8852-43a0adcd0bb8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-46f0b6e1-eb54-47a4-afce-4606dccf4ad5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46f0b6e1-eb54-47a4-afce-4606dccf4ad5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-46f0b6e1-eb54-47a4-afce-4606dccf4ad5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dt[y==1]\",\n  \"rows\": 36,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 28,\n        \"max\": 87,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          87,\n          59,\n          72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Genre\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 18,\n        \"max\": 70,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          21,\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Annual Income (k$)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 28,\n        \"max\": 57,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          54,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending Score (1-100)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 41,\n        \"max\": 65,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          61,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt[y==1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1178
        },
        "id": "kmZM4cYLvwTt",
        "outputId": "ea12df15-1bcf-4a9b-dc93-3c5fda4c64dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    CustomerID   Genre  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "27          28    Male   35                  28                      61\n",
              "43          44  Female   31                  39                      61\n",
              "45          46  Female   24                  39                      65\n",
              "46          47  Female   50                  40                      55\n",
              "47          48  Female   27                  40                      47\n",
              "50          51  Female   49                  42                      52\n",
              "51          52    Male   33                  42                      60\n",
              "52          53  Female   31                  43                      54\n",
              "53          54    Male   59                  43                      60\n",
              "54          55  Female   50                  43                      45\n",
              "55          56    Male   47                  43                      41\n",
              "56          57  Female   51                  44                      50\n",
              "57          58    Male   69                  44                      46\n",
              "58          59  Female   27                  46                      51\n",
              "59          60    Male   53                  46                      46\n",
              "60          61    Male   70                  46                      56\n",
              "61          62    Male   19                  46                      55\n",
              "62          63  Female   67                  47                      52\n",
              "63          64  Female   54                  47                      59\n",
              "64          65    Male   63                  48                      51\n",
              "65          66    Male   18                  48                      59\n",
              "66          67  Female   43                  48                      50\n",
              "67          68  Female   68                  48                      48\n",
              "68          69    Male   19                  48                      59\n",
              "69          70  Female   32                  48                      47\n",
              "70          71    Male   70                  49                      55\n",
              "71          72  Female   47                  49                      42\n",
              "72          73  Female   60                  50                      49\n",
              "73          74  Female   60                  50                      56\n",
              "75          76    Male   26                  54                      54\n",
              "76          77  Female   45                  54                      53\n",
              "78          79  Female   23                  54                      52\n",
              "80          81    Male   57                  54                      51\n",
              "81          82    Male   38                  54                      55\n",
              "84          85  Female   21                  54                      57\n",
              "86          87  Female   55                  57                      58"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2aceee74-0d9b-49be-b0bd-384cd4a8b75c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>28</td>\n",
              "      <td>Male</td>\n",
              "      <td>35</td>\n",
              "      <td>28</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>44</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>39</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>46</td>\n",
              "      <td>Female</td>\n",
              "      <td>24</td>\n",
              "      <td>39</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>47</td>\n",
              "      <td>Female</td>\n",
              "      <td>50</td>\n",
              "      <td>40</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>48</td>\n",
              "      <td>Female</td>\n",
              "      <td>27</td>\n",
              "      <td>40</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>51</td>\n",
              "      <td>Female</td>\n",
              "      <td>49</td>\n",
              "      <td>42</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>52</td>\n",
              "      <td>Male</td>\n",
              "      <td>33</td>\n",
              "      <td>42</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>53</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>43</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>54</td>\n",
              "      <td>Male</td>\n",
              "      <td>59</td>\n",
              "      <td>43</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>55</td>\n",
              "      <td>Female</td>\n",
              "      <td>50</td>\n",
              "      <td>43</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>56</td>\n",
              "      <td>Male</td>\n",
              "      <td>47</td>\n",
              "      <td>43</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>57</td>\n",
              "      <td>Female</td>\n",
              "      <td>51</td>\n",
              "      <td>44</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>58</td>\n",
              "      <td>Male</td>\n",
              "      <td>69</td>\n",
              "      <td>44</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>59</td>\n",
              "      <td>Female</td>\n",
              "      <td>27</td>\n",
              "      <td>46</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>60</td>\n",
              "      <td>Male</td>\n",
              "      <td>53</td>\n",
              "      <td>46</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>61</td>\n",
              "      <td>Male</td>\n",
              "      <td>70</td>\n",
              "      <td>46</td>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>62</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>46</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>63</td>\n",
              "      <td>Female</td>\n",
              "      <td>67</td>\n",
              "      <td>47</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>64</td>\n",
              "      <td>Female</td>\n",
              "      <td>54</td>\n",
              "      <td>47</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>65</td>\n",
              "      <td>Male</td>\n",
              "      <td>63</td>\n",
              "      <td>48</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>66</td>\n",
              "      <td>Male</td>\n",
              "      <td>18</td>\n",
              "      <td>48</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>67</td>\n",
              "      <td>Female</td>\n",
              "      <td>43</td>\n",
              "      <td>48</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>68</td>\n",
              "      <td>Female</td>\n",
              "      <td>68</td>\n",
              "      <td>48</td>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>69</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>48</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>70</td>\n",
              "      <td>Female</td>\n",
              "      <td>32</td>\n",
              "      <td>48</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>71</td>\n",
              "      <td>Male</td>\n",
              "      <td>70</td>\n",
              "      <td>49</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>72</td>\n",
              "      <td>Female</td>\n",
              "      <td>47</td>\n",
              "      <td>49</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>73</td>\n",
              "      <td>Female</td>\n",
              "      <td>60</td>\n",
              "      <td>50</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>74</td>\n",
              "      <td>Female</td>\n",
              "      <td>60</td>\n",
              "      <td>50</td>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75</th>\n",
              "      <td>76</td>\n",
              "      <td>Male</td>\n",
              "      <td>26</td>\n",
              "      <td>54</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>77</td>\n",
              "      <td>Female</td>\n",
              "      <td>45</td>\n",
              "      <td>54</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78</th>\n",
              "      <td>79</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>54</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>81</td>\n",
              "      <td>Male</td>\n",
              "      <td>57</td>\n",
              "      <td>54</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>81</th>\n",
              "      <td>82</td>\n",
              "      <td>Male</td>\n",
              "      <td>38</td>\n",
              "      <td>54</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>85</td>\n",
              "      <td>Female</td>\n",
              "      <td>21</td>\n",
              "      <td>54</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>87</td>\n",
              "      <td>Female</td>\n",
              "      <td>55</td>\n",
              "      <td>57</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2aceee74-0d9b-49be-b0bd-384cd4a8b75c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2aceee74-0d9b-49be-b0bd-384cd4a8b75c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2aceee74-0d9b-49be-b0bd-384cd4a8b75c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fa72ebfa-e656-4b4d-a5a6-c82759c9c077\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa72ebfa-e656-4b4d-a5a6-c82759c9c077')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fa72ebfa-e656-4b4d-a5a6-c82759c9c077 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dt[y==1]\",\n  \"rows\": 36,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 28,\n        \"max\": 87,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          87,\n          59,\n          72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Genre\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 18,\n        \"max\": 70,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          21,\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Annual Income (k$)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 28,\n        \"max\": 57,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          54,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending Score (1-100)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 41,\n        \"max\": 65,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          61,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "from google.colab import files\n",
        "\n",
        "# Save the DataFrame 'dt' as pickle file\n",
        "with open('customer_data.pkl', 'wb') as f:\n",
        "    pickle.dump(dt, f)\n",
        "\n",
        "# Download the pickle file\n",
        "files.download('customer_data.pkl')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "mA1sv2F_yNZw",
        "outputId": "bbfaf7bd-cd7a-4b20-9090-9f18d6d60113"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_5ed20672-e1c5-4128-88fc-f1e85dcce0d8\", \"customer_data.pkl\", 7642)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle as pkl"
      ],
      "metadata": {
        "id": "CTqsT-ff1a6a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pkl.dump(k, open('model.pkl', 'wb'))"
      ],
      "metadata": {
        "id": "IH5ard3W2SCj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sk= pkl.load(open('model.pkl', 'rb'))"
      ],
      "metadata": {
        "id": "-_Q5xZdT3LbA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sk.predict([[25,80]])"
      ],
      "metadata": {
        "id": "ahmrGCHU3jn2",
        "outputId": "fa84b65d-5042-489a-99e1-bf53daa1ba24",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([6], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    }
  ]
}